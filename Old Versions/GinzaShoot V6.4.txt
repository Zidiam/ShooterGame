# Made by Jason Melnik
# Date: 12/18/2017
# Version of game: 6.4

# Imports
import pygame
import time
import random
import operator
import fileinput
import os
import sys
import math
from pygame.math import Vector2


def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)


global names_text
names_text = resource_path("list_of_names.txt")
words = resource_path("LemonMilkbold.otf")
# The size of the screen
WIDTH = 1250
HEIGHT = 625
FPS = 30

# A set list of high scores
for line in fileinput.FileInput(names_text, inplace=1):
    if line.rstrip():
        print(line, end='')

global list_of_names
list_of_names = {}
with open(names_text) as f:
    for line in f:
        (key, val) = line.split()
        list_of_names[str(key)] = int(val)
f.close()

# Color codes
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
AQUA = (0, 255, 255)
VIOLET = (148, 0, 211)
YELLOW = (255, 255, 0)
BROWN = (165, 42, 42)
GRAY = (128, 128, 128)


# Gun Objects:
class Colt_1911(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.ammountofbullets = 100
        self.clip = 8
        self.permclip = 8
        self.reload = 0
        self.permreload = 96
        self.image = Colt1911_pic
        self.rect = self.image.get_rect()
        self.rect.right = WIDTH
        self.rect.bottom = HEIGHT - HEIGHT / 10

    # Bullet object
    class Bullet(pygame.sprite.Sprite):
        # Bullet
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = bulletpic
            self.rect = self.image.get_rect()
            self.rect.center = fighter.rect.center
            self.speed = 5
            mouse_x, mouse_y = pygame.mouse.get_pos()
            bullet_vec_x = mouse_x - fighter.rect.center[0]
            bullet_vec_y = mouse_y - fighter.rect.center[1]
            vec_length = math.sqrt(bullet_vec_x ** 2 + bullet_vec_y ** 2)
            bullet_vec_x = (bullet_vec_x / vec_length) * self.speed  # the five is speed
            bullet_vec_y = (bullet_vec_y / vec_length) * self.speed
            self.change_x = 0
            self.change_y = 0
            self.change_x += bullet_vec_x
            self.change_y += bullet_vec_y
            self.pos_x = fighter.rect.center[0]
            self.pos_y = fighter.rect.center[1]
            self.damage = 5
            self.shootcounter = 2
            self.counter = 0
            self.nextbullet = 0
            self.ammountfornextbullet = 50

        def update(self):
            self.nextbullet += 1
            if self.rect.x < -10 or self.rect.x > WIDTH + 10 or self.rect.y < -10 or self.rect.y > HEIGHT + 10:
                Bullets.remove(self)

            self.counter += 1
            if self.shootcounter < self.counter:
                self.counter = 0

                self.pos_x += self.change_x
                self.pos_y += self.change_y

                self.rect.x = self.pos_x
                self.rect.y = self.pos_y

            for i in range(len(enemy_ships)):
                if pygame.sprite.collide_rect(self, enemy_ships.sprites()[i]):
                    Bullets.remove(self)
                    enemy_ships.sprites()[i].heal -= self.damage
                    if enemy_ships.sprites()[i].heal <= 0:
                        global points_counter
                        points_counter += 1
                        enemy_ships.remove(enemy_ships.sprites()[i])
            if pygame.sprite.collide_rect(self, CoinObject):
                CoinObject.update()
                Bullets.remove(self)
                global coins
                coins += coinadd

    class Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            Colt_1911.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2, HEIGHT / 2)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("Colt1911", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)

    class Bullet_Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2, HEIGHT / 2 + HEIGHT / 5)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("Colt1911 Bullets", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)


class AutoMatic(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.ammountofbullets = 90
        self.clip = 30
        self.permclip = 30
        self.reload = 0
        self.permreload = 100
        self.image = autogunpic
        self.rect = self.image.get_rect()
        self.rect.right = WIDTH
        self.rect.bottom = HEIGHT - HEIGHT / 10

    # Bullet object
    class Bullet(pygame.sprite.Sprite):
        # Bullet
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = bulletpic
            self.rect = self.image.get_rect()
            self.rect.center = fighter.rect.center
            self.speed = 5
            mouse_x, mouse_y = pygame.mouse.get_pos()
            bullet_vec_x = mouse_x - fighter.rect.center[0]
            bullet_vec_y = mouse_y - fighter.rect.center[1]
            vec_length = math.sqrt(bullet_vec_x ** 2 + bullet_vec_y ** 2)
            bullet_vec_x = (bullet_vec_x / vec_length) * self.speed  # the five is speed
            bullet_vec_y = (bullet_vec_y / vec_length) * self.speed
            self.change_x = 0
            self.change_y = 0
            self.change_x += bullet_vec_x
            self.change_y += bullet_vec_y
            self.pos_x = fighter.rect.center[0]
            self.pos_y = fighter.rect.center[1]
            self.damage = 1
            self.shootcounter = 2
            self.counter = 0
            self.nextbullet = 0
            self.ammountfornextbullet = 2

        def update(self):
            self.nextbullet += 1
            if self.rect.x < -10 or self.rect.x > WIDTH + 10 or self.rect.y < -10 or self.rect.y > HEIGHT + 10:
                Bullets.remove(self)

            self.counter += 1
            if self.shootcounter < self.counter:
                self.counter = 0

                self.pos_x += self.change_x
                self.pos_y += self.change_y

                self.rect.x = self.pos_x
                self.rect.y = self.pos_y

            for i in range(len(enemy_ships)):
                if pygame.sprite.collide_rect(self, enemy_ships.sprites()[i]):
                    Bullets.remove(self)
                    enemy_ships.sprites()[i].heal -= self.damage
                    if enemy_ships.sprites()[i].heal <= 0:
                        global points_counter
                        points_counter += 1
                        enemy_ships.remove(enemy_ships.sprites()[i])
            if pygame.sprite.collide_rect(self, CoinObject):
                CoinObject.update()
                Bullets.remove(self)
                global coins
                coins += coinadd

    # This object is just to click on in the shop
    class Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2 + WIDTH / 4, HEIGHT / 2)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("AutoMatic", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)

    class Bullet_Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2 + WIDTH / 4, HEIGHT / 2 + HEIGHT / 5)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("AutoMatic Bullets", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)


class Sniper(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.ammountofbullets = 10
        self.clip = 1
        self.permclip = 1
        self.reload = 0
        self.permreload = 100
        self.image = snipergunpic
        self.rect = self.image.get_rect()
        self.rect.right = WIDTH
        self.rect.bottom = HEIGHT - HEIGHT / 10

    # Bullet object
    class Bullet(pygame.sprite.Sprite):
        # Bullet that shoots up
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = bulletpic
            self.rect = self.image.get_rect()
            self.rect.center = fighter.rect.center
            self.speed = 15
            mouse_x, mouse_y = pygame.mouse.get_pos()
            bullet_vec_x = mouse_x - fighter.rect.center[0]
            bullet_vec_y = mouse_y - fighter.rect.center[1]
            vec_length = math.sqrt(bullet_vec_x ** 2 + bullet_vec_y ** 2)
            bullet_vec_x = (bullet_vec_x / vec_length) * self.speed  # the five is speed
            bullet_vec_y = (bullet_vec_y / vec_length) * self.speed
            self.change_x = 0
            self.change_y = 0
            self.change_x += bullet_vec_x
            self.change_y += bullet_vec_y
            self.pos_x = fighter.rect.center[0]
            self.pos_y = fighter.rect.center[1]
            self.damage = 100
            self.shootcounter = 1
            self.counter = 0
            self.nextbullet = 0
            self.ammountfornextbullet = 1000

        def update(self):
            self.nextbullet += 1
            if self.rect.x < -10 or self.rect.x > WIDTH + 10 or self.rect.y < -10 or self.rect.y > HEIGHT + 10:
                Bullets.remove(self)

            self.counter += 1
            if self.shootcounter < self.counter:
                self.counter = 0

                self.pos_x += self.change_x
                self.pos_y += self.change_y

                self.rect.x = self.pos_x
                self.rect.y = self.pos_y

            for i in range(len(enemy_ships)):
                if pygame.sprite.collide_rect(self, enemy_ships.sprites()[i]):
                    Bullets.remove(self)
                    enemy_ships.sprites()[i].heal -= self.damage
                    if enemy_ships.sprites()[i].heal <= 0:
                        global points_counter
                        points_counter += 1
                        enemy_ships.remove(enemy_ships.sprites()[i])
            if pygame.sprite.collide_rect(self, CoinObject):
                CoinObject.update()
                Bullets.remove(self)
                global coins
                coins += coinadd

    class Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2 - WIDTH / 4, HEIGHT / 2)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("Sniper", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)

    class Bullet_Shop(pygame.sprite.Sprite):
        def __init__(self):
            pygame.sprite.Sprite.__init__(self)
            self.image = buypic
            self.rect = self.image.get_rect()
            self.rect.center = (WIDTH / 2 - WIDTH / 4, HEIGHT / 2 + HEIGHT / 5)
            self.cost = 100

        def info(self):
            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render(str(self.cost), True, GREEN)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.bottom = self.rect.centery - 20
            screen2.blit(text4, textrect4)

            text4 = basicfont4.render("Sniper Bullets", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = self.rect.centerx
            textrect4.top = self.rect.centery + 20
            screen2.blit(text4, textrect4)


# Fighter Object
class Fighter(pygame.sprite.Sprite):
    # Fighter that moves around
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        ck = (127, 33, 33)
        self.image = pygame.Surface((26, 26))
        self.image.fill(ck)
        self.image.set_colorkey(ck)
        pygame.draw.polygon(self.image, RED, [[0, 25], [12.5, 0], [25, 25]], 0)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 2, HEIGHT / 2)
        self.orig_image = self.image  # Store a reference to the original.
        self.rect = self.image.get_rect(center=self.rect.center)
        self.pos = Vector2(self.rect.center)

        self.size = 26
        self.heal = 100
        self.startinghealth = 100

    def update(self):
        mouse_x, mouse_y = pygame.mouse.get_pos()
        rel_x, rel_y = mouse_x - self.rect.centerx, mouse_y - self.rect.centery
        angle = (180 / math.pi) * -math.atan2(rel_y, rel_x)
        # Rotate the image by the negative angle (y-axis in pygame is flipped).
        self.image = pygame.transform.rotate(self.orig_image, (angle - 90))
        # Create a new rect with the center of the old rect.
        self.rect = self.image.get_rect(center=self.rect.center)

    def health(self):
        basicfont4 = pygame.font.Font(words, 12)  # This code displays letters onto the screen
        text4 = basicfont4.render(str(round(self.heal / self.startinghealth * 100)) + ("%"), True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = self.rect.centerx
        textrect4.centery = self.rect.centery - 25
        screen.blit(text4, textrect4)
        if self.heal <= 0:
            global game_over_2
            game_over_2 = True

    def up(self):
        if Check_Collision(self, Wall_List.sprites(), "up") == False:
            if self.rect.y > 0:
                self.rect.y -= 5

    def down(self):
        if Check_Collision(self, Wall_List.sprites(), "down") == False:
            if self.rect.y < HEIGHT:
                self.rect.y += 5

    def left(self):
        if Check_Collision(self, Wall_List.sprites(), "left") == False:
                if self.rect.x > 0:
                    self.rect.x -= 5

    def right(self):
        if Check_Collision(self, Wall_List.sprites(), "right") == False:
            if self.rect.x < WIDTH - 30:
                self.rect.x += 5

#CORNERS!!!!!!!!!!!!!!!!!!
def Check_Collision(object1, list, direction):
    if direction == "up":
        for i in range(len(list)):
            if pygame.sprite.collide_rect(object1, list[i]):
                if ((object1.rect.centery - object1.size / 2 - 5) < list[i].rect.bottomright[1] and (object1.rect.centerx + object1.size / 2) < list[i].rect.centerx - list[i].size / 2):
                    if ((object1.rect.centery - object1.size / 2 - 5) < list[i].rect.midtop[1]):
                        print("3")
                        return False
                    else:
                        return True

                if object1.rect.midleft[1] < list[i].rect.bottomright[1]:
                    print("2")
                    return False

                if ((object1.rect.centery - object1.size / 2 - 5) < list[i].rect.midtop[1]):
                    print("3")
                    return False
                else:
                    return True

    if direction == "down":

        for i in range(len(list)):
            if pygame.sprite.collide_rect(object1, list[i]):

                if ((object1.rect.centery + object1.size / 2 + 5) < list[i].rect.topright[1] and (object1.rect.centerx + object1.size / 2) < list[i].rect.centerx + list[i].size / 2):
                    return False

                if ((object1.rect.centery - object1.size / 2 + 5) > list[i].rect.midtop[1]):
                    return False
                else:
                    return True

    if direction == "right":
        for i in range(len(list)):
            if pygame.sprite.collide_rect(object1, list[i]):

                if object1.rect.midright[0] + 5 > list[i].rect.midleft[0] and object1.rect.centerx < list[i].rect.midleft[0]:
                    return True

                if ((object1.rect.centerx - object1.size / 2 + 5) > list[i].rect.midright[0] or
                        list[i].rect.midleft[0] or
                        list[i].rect.midbottom[0] or
                        list[i].rect.midtop[0]):
                    return False
                else:
                    return True

    if direction == "left":
        for i in range(len(list)):
            if pygame.sprite.collide_rect(object1, list[i]):
                if object1.rect.midleft[0] - 5 < list[i].rect.midright[0] and object1.rect.centerx > list[i].rect.midright[0]:
                    return True

                if ((object1.rect.centerx - object1.size / 2 - 5) > list[i].rect.midright[0] or
                        list[i].rect.midleft[0] or
                        list[i].rect.midbottom[0] or
                        list[i].rect.midtop[0]):
                    return False
                else:
                    return True
    return False

def get_angle(origin, destination):
    """Returns angle in radians from origin to destination.
       This is the angle that you would get if the points were
       on a cartesian grid. Arguments of (0,0), (1, -1)
       return pi/4 (45 deg) rather than  7/4.
       """
    x_dist = destination[0] - origin[0]
    y_dist = destination[1] - origin[1]
    return math.atan2(-y_dist, x_dist) % (2 * math.pi)


def project(pos, angle, distance):
    """
   Returns tuple of pos projected distance at angle
   adjusted for pygame's y-axis.

   EXAMPLES

   Move a sprite using it's angle and speed
   new_pos = project(sprite.pos, sprite.angle, sprite.speed)

   Find the relative x and y components of an angle and speed
   x_and_y = project((0, 0), angle, speed)
   """
    return (pos[0] + (math.cos(angle) * distance),
            pos[1] - (math.sin(angle) * distance))


# Enemy Object
class Easy_Enemy(pygame.sprite.Sprite):
    # Enemy Ship that moves around
    def __init__(self, enemy_ship_x, enemy_ship_y):  # These are its features
        pygame.sprite.Sprite.__init__(self)
        self.image = enemyship
        self.rect = self.image.get_rect()
        self.rect.center = (enemy_ship_x, enemy_ship_y)
        self.speed = 0.01

        self.startinghealth = 100
        self.heal = 100
        self.damage = 1

        self.pos = self.rect.center

    def update(self):
        angle = get_angle(self.rect.center, fighter.rect.center)
        self.pos = project(self.pos, angle, self.speed * 30)
        self.rect.center = self.pos
        if pygame.sprite.collide_rect(self, fighter):
            fighter.heal -= self.damage

    def health(self):
        basicfont4 = pygame.font.Font(words, 12)  # This code displays letters onto the screen
        text4 = basicfont4.render(str(round(self.heal / self.startinghealth * 100)) + ("%"), True, RED)
        textrect4 = text4.get_rect()
        textrect4.centerx = self.rect.centerx
        textrect4.centery = self.rect.centery - 25
        screen.blit(text4, textrect4)


# Coin Object
class Coin_Object(pygame.sprite.Sprite):
    def __init__(self):
        coin_random_x = random.randint(20, WIDTH - 20)
        coin_random_y = random.randint(20, HEIGHT - 20)
        pygame.sprite.Sprite.__init__(self)

        self.image = gcoin
        self.rect = self.image.get_rect()
        self.rect.center = (coin_random_x, coin_random_y)

    def update(self):
        coin_random_x = random.randint(20, WIDTH - 20)
        coin_random_y = random.randint(20, HEIGHT - 20)
        self.rect.center = (coin_random_x, coin_random_y)


# Walls the player collides to
class Wall(pygame.sprite.Sprite):
    """ Wall the player can run into. """

    def __init__(self, x, y, width, height):
        """ Constructor for the wall that the player can run into. """
        # Call the parent's constructor
        super().__init__()

        self.image = wall_pic
        self.rect = self.image.get_rect()
        # Make a blue wall, of the size specified in the parameters
        self.image = pygame.Surface([width, height])

        # Make our top-left corner the passed-in location.
        self.rect = self.image.get_rect()
        self.rect.y = y
        self.rect.x = x

        self.collision = [False] * 9
        self.text = ""
        if width < height:
            self.size = width
        elif width > height:
            self.size = height
        else:
            self.size = width
    def check_collision(self, rect):
        self.collision[0] = rect.collidepoint(self.rect.topleft)
        self.collision[1] = rect.collidepoint(self.rect.topright)
        self.collision[2] = rect.collidepoint(self.rect.bottomleft)
        self.collision[3] = rect.collidepoint(self.rect.bottomright)

        self.collision[4] = rect.collidepoint(self.rect.midleft)
        self.collision[5] = rect.collidepoint(self.rect.midright)
        self.collision[6] = rect.collidepoint(self.rect.midtop)
        self.collision[7] = rect.collidepoint(self.rect.midbottom)

        self.collision[8] = rect.collidepoint(self.rect.center)

    def render_collision_info(self):

        text = "collision: "

        if self.collision[0] or self.collision[2] or self.collision[4]:
            text += "left "
            print("left")

        if self.collision[1] or self.collision[3] or self.collision[5]:
            text += "right "
            print("right")

        if self.collision[0] or self.collision[1] or self.collision[6]:
            text += "top "
            print("top")

        if self.collision[2] or self.collision[3] or self.collision[7]:
            text += "bottom "
            print("bottom")

        if self.collision[8]:
            text += "center "
            print("center")


# This object is for controls
class Controls(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        charRect2 = pygame.Rect((0, 0), (100, 100))
        Controls = pygame.image.load(os.path.abspath("Controls.png"))
        Controls = pygame.transform.scale(Controls, charRect2.size)
        Controls = Controls.convert()

        self.image = Controls
        self.rect = self.image.get_rect()
        self.rect.center = (200, 450)


# This object is for controls
class SControls(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        charRect2 = pygame.Rect((0, 0), (100, 100))
        SControls = pygame.image.load(os.path.abspath("SControls.png"))
        SControls = pygame.transform.scale(SControls, charRect2.size)
        SControls = SControls.convert()

        self.image = SControls
        self.rect = self.image.get_rect()
        self.rect.center = (300, 450)


# My level algorith that creates levels for me
def levels(x):
    global enemy_death_count
    enemy_death_count = 0
    global enemy_ship_y
    global enemy_ship_x
    global continue_level
    global enemy_ships
    global enemy_speed
    global enemy_ship
    continue_level = 0
    for i in range(
            x):  # Basicly to put it in simple terms if the ships reach the end of the screen it start a new row and so on untill it reachest level 191 then it resets
        enemy_ship_y = random.randint(10, HEIGHT - 10)
        enemy_ship_x = random.randint(10, WIDTH - 10)
        enemy_ship = Easy_Enemy(enemy_ship_x, enemy_ship_y)
        enemy_ships.add(enemy_ship)
    global start_level
    start_level = 1


def gameLoop():  # The start of the whole game
    # Global Initiation
    global movement_counter
    global swait
    global shoot_counter
    global points_buy
    global bulletpic
    global how_many_bullets
    global enemy_ship_location
    global enemy_counter
    global enemy_ship_x
    global enemy_ship_y
    global start_level
    global level
    global total_level
    global enemy_death_count
    global continue_level
    global enemy_ship_location
    global allenemy_counter
    global name
    global left_key
    global right_key
    global points_counter
    global game_over_2
    global buypic
    global enemy_ships
    global ship
    global bullet
    global shop
    global move_timer
    global bullet_timer
    global bullet_speed
    global coins
    global movement
    global speed
    global move
    global wait
    global enemy_speed
    global extra_bullet_object
    global Extra_Bullet
    global movement_speed
    global Bullets
    global AllCoins
    global coin_timer
    global coin_timer_counter
    global coin_delay
    global coin_ammount
    global coin_delay_counter
    global coin_spawn
    global how_many_coinspeed
    global how_many_coindelay
    global coinadd
    global coinadd_counter
    global listnam
    global oldscore
    global start
    global CoinObject
    global coins
    global gcoin
    global enemy_counter
    global fighter
    global autogunpic
    global automatic_bullets
    global sniper_bullets
    global Colt1911_pic
    global snipergunpic
    global Equiped_Gun
    global automatic
    global sniper
    global colt
    global reload
    global screen2
    global Gun_List
    global Shop_Sprites
    global Wall_List
    global wall_pic

    # Pygame Setup
    pygame.init()
    pygame.mixer.init()
    global screen
    screen = pygame.display.set_mode((WIDTH, HEIGHT))  # Sets the screen size
    pygame.display.set_caption("Ginza Arcade")  # sets the caption
    charRect3 = pygame.Rect((0, 0), (WIDTH, HEIGHT))
    backgroundpic = pygame.image.load(os.path.abspath("backgroundpic.png"))
    backgroundpic = pygame.transform.scale(backgroundpic, charRect3.size)
    backgroundpic = backgroundpic.convert()
    clock = pygame.time.Clock()

    # All starting values
    reload = False
    movement_counter = 0
    swait = 0
    shoot_counter = 0
    points_buy = 5
    start = False
    how_many_bullets = 1000
    listnam = False
    coin_timer_counter = 0
    coin_delayer = 1000
    coin_delay_counter = 0
    name = ""
    coin_timer = 1000
    coins = 1000000
    coinadd = 5
    coinadd_counter = 0
    how_many_coinspeed = 0
    how_many_coindelay = 0
    wait = 0
    speed = 0
    move = 0
    enemy_speed = 1
    answer = ''
    total_level = 10
    movement = 1
    bullet_timer = 0
    bullet_speed = 50
    move_timer = 0
    game_over_2 = False
    enemy_ship_location = 0
    points_counter = 0
    shop = False
    gameExit = False
    game_over = False
    left_key = 0
    right_key = 0
    enemy_counter = 0
    enemy_ship_x = 20
    enemy_ship_y = 20
    start_level = 0
    level = 10
    enemy_death_count = 0
    continue_level = 0
    all_enemy_counter = 0
    enter = False
    enter2 = False
    inputed_name = False
    global yesorno
    yesorno = False
    while inputed_name == False:  # This code is for entering your name
        list_of_names = {}
        with open(names_text) as f:
            for line in f:
                (key, val) = line.split()
                list_of_names[str(key)] = int(val)
        if yesorno == False:
            pygame.init()
            pygame.mixer.init()
            screen = pygame.display.set_mode((WIDTH, HEIGHT))
            pygame.display.set_caption("Ginza Arcade")
            clock = pygame.time.Clock()

            screen.blit(backgroundpic, [0, 0])

            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render("Enter Name: ", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2 - HEIGHT / 6
            screen.blit(text4, textrect4)

            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render("Press enter to continue!", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2 + HEIGHT / 6
            screen.blit(text4, textrect4)

            basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
            text4 = basicfont4.render("Welcome to Ginza Arcade! ", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = 12
            screen.blit(text4, textrect4)

            basicfont4 = pygame.font.Font(words, 48)  # This code displays letters onto the screen
            text4 = basicfont4.render(name, True, RED)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2
            screen.blit(text4, textrect4)

            basicfont4 = pygame.font.Font(words, 18)  # This code displays letters onto the screen
            text4 = basicfont4.render("Controls: ", True, RED)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2 + HEIGHT / 4
            screen.blit(text4, textrect4)

            controls = pygame.sprite.Group()
            control = Controls()
            controls.add(control)
            scontrol = SControls()
            controls.add(scontrol)

            controls.draw(screen)

            pygame.display.flip()
            pygame.display.update()
            for event in pygame.event.get():  # This code is to see what keys you press and input them into name
                if event.type == pygame.QUIT:  # If you click on the X on the screen it asks if you want to close the game
                    exit()
                    gameExit = True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_KP_ENTER:  # If you click enter it jumps to the game if theres no one in the list that has that name
                        enter = True
                    if len(name) < 25:
                        if event.key == pygame.K_a:
                            name = name + "A"
                        if event.key == pygame.K_b:
                            name = name + "B"
                        if event.key == pygame.K_c:
                            name = name + "C"
                        if event.key == pygame.K_d:
                            name = name + "D"
                        if event.key == pygame.K_e:
                            name = name + "E"
                        if event.key == pygame.K_f:
                            name = name + "F"
                        if event.key == pygame.K_g:
                            name = name + "G"
                        if event.key == pygame.K_h:
                            name = name + "H"
                        if event.key == pygame.K_i:
                            name = name + "I"
                        if event.key == pygame.K_j:
                            name = name + "J"
                        if event.key == pygame.K_k:
                            name = name + "K"
                        if event.key == pygame.K_l:
                            name = name + "L"
                        if event.key == pygame.K_m:
                            name = name + "M"
                        if event.key == pygame.K_n:
                            name = name + "N"
                        if event.key == pygame.K_o:
                            name = name + "O"
                        if event.key == pygame.K_p:
                            name = name + "P"
                        if event.key == pygame.K_q:
                            name = name + "Q"
                        if event.key == pygame.K_r:
                            name = name + "R"
                        if event.key == pygame.K_s:
                            name = name + "S"
                        if event.key == pygame.K_t:
                            name = name + "T"
                        if event.key == pygame.K_u:
                            name = name + "U"
                        if event.key == pygame.K_v:
                            name = name + "V"
                        if event.key == pygame.K_w:
                            name = name + "W"
                        if event.key == pygame.K_x:
                            name = name + "X"
                        if event.key == pygame.K_y:
                            name = name + "Y"
                        if event.key == pygame.K_z:
                            name = name + "Z"
                        if event.key == pygame.K_SPACE:
                            name = name + " "
                    if len(name) > 0:
                        if event.key == pygame.K_BACKSPACE:  # if you click backspace it gets rid of a letter in name
                            name = list(name)
                            del name[-1]
                            name = ''.join(name)
            if enter == True:  # checks to see if name is in the list of people who played before and if yes you can choose to sign back in or not
                if not (name in list_of_names):
                    inputed_name = True
                    oldscore = -1
                else:
                    yesorno = True
        else:
            screen.blit(backgroundpic, [0, 0])

            basicfont4 = pygame.font.Font(words, 48)  # This code displays letters onto the screen
            text4 = basicfont4.render(name, True, RED)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2 - HEIGHT / 6
            screen.blit(text4, textrect4)

            basicfont4 = pygame.font.Font(words, 28)  # This code displays letters onto the screen
            text4 = basicfont4.render("has already played want to log back in?(type yes or no)", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2 + HEIGHT / 6
            screen.blit(text4, textrect4)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:  # If you click on the X on the screen it asks if you want to close the game
                    exit()
                    gameExit = True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_y:
                        answer = answer + "Y"
                    if event.key == pygame.K_e:
                        answer = answer + "E"
                    if event.key == pygame.K_s:
                        answer = answer + "S"
                    if event.key == pygame.K_n:
                        answer = answer + "N"
                    if event.key == pygame.K_o:
                        answer = answer + "O"
                    if event.key == pygame.K_BACKSPACE:
                        answer = list(answer)
                        del answer[-1]
                        answer = ''.join(answer)
                    if event.key == pygame.K_KP_ENTER:
                        enter2 = True
            basicfont4 = pygame.font.Font(words, 64)  # This code displays letters onto the screen
            text4 = basicfont4.render(answer, True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT / 2
            screen.blit(text4, textrect4)

            if enter2 == True:  # This is the last conformation step to make sure you want to sign back in
                if answer == "YES":
                    # HighScore Setup

                    with open(names_text) as f:
                        for line in f:
                            (key, val) = line.split()
                            list_of_names[str(key)] = int(val)
                    inputed_name = True
                    oldscore = list_of_names[name]
                    inputed_name = True
                if answer == "NO":
                    yesorno = False
                    name = ''
                    enter = False
                    answer = ''
                enter2 = False
            pygame.display.flip()
            pygame.display.update()
    game_over = False
    pygame.init()
    while not gameExit:
        if start == False:
            global goodship
            global enemyship

            charRect = pygame.Rect((0, 0), (50, 50))
            goodship = pygame.image.load(os.path.abspath("goodship.png"))
            goodship = pygame.transform.scale(goodship, charRect.size)
            goodship = goodship.convert()

            enemyship = pygame.image.load(os.path.abspath("enemyship.png"))
            enemyship = pygame.transform.scale(enemyship, charRect.size)
            enemyship = enemyship.convert()

            charRect2 = pygame.Rect((0, 0), (5, 5))
            bulletpic = pygame.image.load(os.path.abspath("bulletpic.png"))
            bulletpic = pygame.transform.scale(bulletpic, charRect2.size)
            bulletpic = bulletpic.convert()

            charRect3 = pygame.Rect((0, 0), (40, 40))
            buypic = pygame.image.load(os.path.abspath("buypic.png"))
            buypic = pygame.transform.scale(buypic, charRect3.size)
            buypic = buypic.convert()

            charRect4 = pygame.Rect((0, 0), (20, 20))
            gcoin = pygame.image.load(os.path.abspath("gcoin.png"))
            gcoin = pygame.transform.scale(gcoin, charRect4.size)
            gcoin = gcoin.convert()

            charRect5 = pygame.Rect((0, 0), (200, 50))
            autogunpic = pygame.image.load(os.path.abspath("AutoMaticGun.png"))
            autogunpic = pygame.transform.scale(autogunpic, charRect5.size)
            autogunpic = autogunpic.convert()

            charRect5 = pygame.Rect((0, 0), (200, 50))
            snipergunpic = pygame.image.load(os.path.abspath("SniperGunPic.png"))
            snipergunpic = pygame.transform.scale(snipergunpic, charRect5.size)
            snipergunpic = snipergunpic.convert()

            charRect5 = pygame.Rect((0, 0), (200, 50))
            Colt1911_pic = pygame.image.load(os.path.abspath("Colt_1911_pic.png"))
            Colt1911_pic = pygame.transform.scale(Colt1911_pic, charRect5.size)
            Colt1911_pic = Colt1911_pic.convert()

            charRect5 = pygame.Rect((0, 0), (200, 50))
            wall_pic = pygame.image.load(os.path.abspath("wallpic.png"))
            wall_pic = pygame.transform.scale(wall_pic, charRect5.size)
            wall_pic = wall_pic.convert()

            # Object Setup
            Equiped_Gun = pygame.sprite.Group()
            Main = pygame.sprite.Group()
            Bullets = pygame.sprite.Group()
            enemy_ships = pygame.sprite.Group()
            AllCoins = pygame.sprite.Group()
            Gun_List = pygame.sprite.Group()
            CoinObject = Coin_Object()
            AllCoins.add(CoinObject)
            Wall_List = pygame.sprite.Group()

            # Making walls:
            wall = Wall(50, 100, 500, 20)
            wal2 = Wall(50, 100, 20, 500)
            wal3 = Wall(300, 300, 100, 100)
            Wall_List.add(wall)
            Wall_List.add(wal2)
            Wall_List.add(wal3)

            # all Guns:
            automatic = AutoMatic()
            sniper = Sniper()
            colt = Colt_1911()

            # Putting all guns into a list
            Gun_List.add(automatic)
            Gun_List.add(sniper)
            Gun_List.add(colt)

            # Starting Gun
            Equiped_Gun.add(colt)

            fighter = Fighter()
            Main.add(fighter)
            start = True

            # Shop Sprites
            Shop_Sprites = pygame.sprite.Group()
            for i in range(len(Gun_List.sprites())):
                Shop_Sprites.add(Gun_List.sprites()[i].Shop())
                Shop_Sprites.add(Gun_List.sprites()[i].Bullet_Shop())

        while game_over != False:  # This is the main Code
            screen.blit(backgroundpic, [0, 0])
            pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # If you click on the X on the screen it asks if you want to close the game
                gameExit = True

        fighter.update()

        keystate = pygame.key.get_pressed()

        if Equiped_Gun.sprites()[0].clip > 0:
            if pygame.mouse.get_pressed()[0]:
                try:
                    if Bullets.sprites()[-1].nextbullet > Bullets.sprites()[-1].ammountfornextbullet:
                        Equiped_Gun.sprites()[0].clip -= 1
                        print(Equiped_Gun.sprites()[0].clip)

                        bullet = Equiped_Gun.sprites()[0].Bullet()
                        bullet.rect.center = fighter.rect.center
                        Bullets.add(bullet)
                except IndexError:
                    Equiped_Gun.sprites()[0].clip -= 1
                    print(Equiped_Gun.sprites()[0].clip)

                    bullet = Equiped_Gun.sprites()[0].Bullet()
                    bullet.rect.center = fighter.rect.center
                    Bullets.add(bullet)
        elif (Equiped_Gun.sprites()[0].ammountofbullets > 0):  # reload
            Equiped_Gun.sprites()[0].reload += 1
            basicfont4 = pygame.font.Font(words, 15)  # This code displays letters onto the screen
            text5 = basicfont4.render("Reloading...", True, RED)
            textrect5 = text5.get_rect()
            textrect5.centerx = WIDTH / 2
            textrect5.centery = HEIGHT / 2 + HEIGHT / 3
            screen.blit(text5, textrect5)

            if (Equiped_Gun.sprites()[0].permreload < Equiped_Gun.sprites()[0].reload):
                Equiped_Gun.sprites()[0].ammountofbullets -= Equiped_Gun.sprites()[0].permclip
                Equiped_Gun.sprites()[0].clip = Equiped_Gun.sprites()[0].permclip
                Equiped_Gun.sprites()[0].reload = 0
        if reload == True:
            Equiped_Gun.sprites()[0].reload += 1
            basicfont4 = pygame.font.Font(words, 15)  # This code displays letters onto the screen
            text5 = basicfont4.render("Reloading...", True, RED)
            textrect5 = text5.get_rect()
            textrect5.centerx = WIDTH / 2
            textrect5.centery = HEIGHT / 2 + HEIGHT / 3
            screen.blit(text5, textrect5)

            if (Equiped_Gun.sprites()[0].permreload < Equiped_Gun.sprites()[0].reload):
                Equiped_Gun.sprites()[0].ammountofbullets -= Equiped_Gun.sprites()[0].permclip - Equiped_Gun.sprites()[
                    0].clip
                Equiped_Gun.sprites()[0].clip = Equiped_Gun.sprites()[0].permclip
                Equiped_Gun.sprites()[0].reload = 0
                reload = False

        for i in range(len(Bullets)):
            try:
                Bullets.sprites()[i].update()
            except IndexError:
                continue

        movement_counter += 1
        if movement_counter >= movement:
            if keystate[pygame.K_w] and keystate[pygame.K_d]:
                fighter.up()
                fighter.right()
            elif keystate[pygame.K_a] and keystate[pygame.K_w]:
                fighter.up()
                fighter.left()
            elif keystate[pygame.K_a] and keystate[pygame.K_s]:
                fighter.down()
                fighter.left()
            elif keystate[pygame.K_s] and keystate[pygame.K_d]:
                fighter.down()
                fighter.right()


            elif keystate[pygame.K_a]:
                fighter.left()
            elif keystate[pygame.K_d]:
                fighter.right()
            elif keystate[pygame.K_w]:
                fighter.up()
            elif keystate[pygame.K_s]:
                fighter.down()

            if keystate[pygame.K_r]:
                reload = True
            movement_counter = 0

        if shop == True:  # This is the start of the shop code
            keystate = pygame.key.get_pressed()
            if keystate[pygame.K_p]:
                if swait > 5:
                    swait = 0
                    shop = not shop
            swait += 1
            pygame.init()
            pygame.mixer.init()
            screen2 = pygame.display.set_mode((WIDTH, HEIGHT))
            pygame.display.set_caption("Ginza Arcade")

            screen2.blit(backgroundpic, [0, 0])
            basicfont4 = pygame.font.Font(words, 15)  # This code displays letters onto the screen

            for i in range(len(Shop_Sprites.sprites())):
                Shop_Sprites.sprites()[i].info()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:  # If you click on the X on the screen it asks if you want to close the game
                    gameExit = True
                if event.type == pygame.MOUSEBUTTONUP:
                    pos = pygame.mouse.get_pos()

                    for i in range(len(Gun_List.sprites())):
                        if Gun_List.sprites()[i].Shop().rect.collidepoint(pos):
                            if coins > Gun_List.sprites()[i].Shop().cost:
                                coins -= Gun_List.sprites()[i].Shop().cost
                                Equiped_Gun.remove(Equiped_Gun.sprites()[0])
                                Equiped_Gun.add(Gun_List.sprites()[i])
                                print("t")
                            else:
                                wait = 1000

                    for i in range(len(Gun_List.sprites())):
                        if Gun_List.sprites()[i].Bullet_Shop().rect.collidepoint(pos):
                            if coins > Gun_List.sprites()[i].Shop().cost:
                                coins -= Gun_List.sprites()[i].Bullet_Shop().cost
                                Gun_List.sprites()[i].ammountofbullets += 90
                                print("t")
                            else:
                                wait = 1000

            if wait >= 1:
                basicfont4 = pygame.font.Font(words, 42)  # This code displays letters onto the screen
                text4 = basicfont4.render("Not Enough Coins!", True, RED)
                textrect4 = text4.get_rect()
                textrect4.centerx = 250
                textrect4.centery = 250
                screen2.blit(text4, textrect4)
                wait -= 1

            basicfont4 = pygame.font.Font(words, 30)  # This code displays letters onto the screen
            text4 = basicfont4.render("Press P to leave shop!", True, AQUA)
            textrect4 = text4.get_rect()
            textrect4.centerx = WIDTH / 2
            textrect4.centery = HEIGHT - 30
            screen2.blit(text4, textrect4)

            text6 = basicfont4.render("Coins: " + str(coins), True, YELLOW)
            textrect6 = text6.get_rect()
            textrect6.right = WIDTH
            screen.blit(text6, textrect6)

            text2 = basicfont4.render('Points: ' + str(points_counter), True, GREEN)
            textrect2 = text2.get_rect()
            textrect2.left = 0
            screen.blit(text2, textrect2)

            Shop_Sprites.draw(screen2)
            pygame.display.flip()
            pygame.display.update()

        if shop == False:  # The part of the code that makes it happen
            keystate = pygame.key.get_pressed()
            if keystate[pygame.K_p]:
                if swait > 5:
                    swait = 0
                    shop = not shop
            swait += 1
            wait = 0
            if start_level == 0:  # Checks if its a new level and if yes then make new ships
                levels(level)
            if len(enemy_ships.sprites()) == 0:
                start_level = 0
                level += 1
                total_level = total_level + 1
                coins = coins + coinadd

            all_enemy_counter += 1
            if all_enemy_counter > enemy_speed:
                for i in range(len(enemy_ships.sprites())):
                    enemy_ships.sprites()[i].update()

                all_enemy_counter = 0

            for i in range(len(enemy_ships.sprites())):
                enemy_ships.sprites()[i].health()

            fighter.health()

            bullet_timer += 100
            if bullet_timer >= bullet_speed:
                try:
                    for i in range(len(Bullets.sprites())):
                        Bullets.sprites()[i].update()
                except IndexError:
                    continue
                bullet_timer = 0

            basicfont1 = pygame.font.Font(words, 15)
            text1 = basicfont1.render('Level: ' + str(total_level - 9), True, RED)
            textrect1 = text1.get_rect()
            textrect1.right = WIDTH

            screen.blit(text1, textrect1)

            text2 = basicfont1.render('Points: ' + str(points_counter), True, GREEN)
            textrect2 = text2.get_rect()
            textrect2.left = 0

            screen.blit(text2, textrect2)

            text3 = basicfont1.render(name, True, AQUA)
            textrect3 = text3.get_rect()
            textrect3.centerx = WIDTH / 2
            textrect3.centery = 7

            screen.blit(text3, textrect3)

            text6 = basicfont1.render("Coins: " + str(coins), True, YELLOW)
            textrect6 = text6.get_rect()
            textrect6.left = 0
            textrect6.bottom = HEIGHT - HEIGHT / 10

            screen.blit(text6, textrect6)

            basicfont4 = pygame.font.Font(words, 25)  # This code displays letters onto the screen
            text4 = basicfont4.render(
                str(Equiped_Gun.sprites()[0].ammountofbullets) + "/" + str(Equiped_Gun.sprites()[0].clip), True, RED)
            textrect4 = text4.get_rect()
            textrect4.right = WIDTH
            textrect4.top = HEIGHT - HEIGHT / 10
            screen.blit(text4, textrect4)

            # Draw/Render
            coin_timer_counter += 1
            if coin_timer_counter >= coin_timer:
                AllCoins.draw(screen)
                coin_delay_counter += 1
                if coin_delayer == coin_delay_counter:
                    CoinObject.update()
                    AllCoins.sprites()[0].update()
                    coin_delay_counter = 0
                    coin_timer_counter = 0

            Equiped_Gun.draw(screen)
            Bullets.draw(screen)
            Main.draw(screen)
            Wall_List.draw(screen)
            enemy_ships.draw(screen)
            # after drawwing flip display
            pygame.display.flip()

            pygame.display.update()
            screen.blit(backgroundpic, [0, 0])
            if game_over_2 == True:
                pygame.quit()
                break


game_over_2 = False
done = False
while done == False:
    if game_over_2 == False:
        gameLoop()
        game_over_2 = True
    if game_over_2 == True:
        if listnam == False:
            if points_counter > oldscore:
                f = open(names_text, "r")
                lines = f.readlines()
                f.close()
                s = open(names_text, "w")
                for line in lines:
                    if line != (name + " " + str(oldscore)):
                        s.write(line)
                s.close()

                t = open(names_text, 'a')
                t.write("\n" + name + " " + str(points_counter))
                t.close()
                listnam = True

                for line in fileinput.FileInput(names_text, inplace=1):
                    if line.rstrip():
                        print(line, end='')
            if oldscore == -1 and listnam == False:
                p = open('list_of_names', 'a')
                p.write("\n" + name + " " + str(points_counter))
                p.close()
                listnam = True
        pygame.init()
        pygame.mixer.init()
        screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption("High Scores:")
        clock = pygame.time.Clock()
        charRect3 = pygame.Rect((0, 0), (WIDTH, HEIGHT))
        backgroundpic = pygame.image.load(os.path.abspath("backgroundpic.png"))
        backgroundpic = pygame.transform.scale(backgroundpic, charRect3.size)
        backgroundpic = backgroundpic.convert()

        screen.blit(backgroundpic, [0, 0])

        list_of_names = {}
        with open(names_text) as f:
            for line in f:
                (key, val) = line.split()
                list_of_names[str(key)] = int(val)
        f.close()

        allnames = list_of_names  # sorting code
        allnames = sorted(allnames.items(), key=operator.itemgetter(1))
        allnames.reverse()

        basicfont4 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
        text4 = basicfont4.render(("1: " + str(allnames[0][0]) + "............................" + str(allnames[0][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 2.1
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("2: " + str(allnames[1][0]) + "............................" + str(allnames[1][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 2.4
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("3: " + str(allnames[2][0]) + "............................" + str(allnames[2][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 2.8
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("4: " + str(allnames[3][0]) + "............................" + str(allnames[3][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 3.3
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("5: " + str(allnames[4][0]) + "............................" + str(allnames[4][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 4.0
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("6: " + str(allnames[5][0]) + "............................" + str(allnames[5][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 5.0
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("7: " + str(allnames[6][0]) + "............................" + str(allnames[6][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 6.8
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("8: " + str(allnames[7][0]) + "............................" + str(allnames[7][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 10
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("9: " + str(allnames[8][0]) + "............................" + str(allnames[8][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 - HEIGHT / 20
        screen.blit(text4, textrect4)

        text4 = basicfont4.render(("10: " + str(allnames[9][0]) + "............................" + str(allnames[9][1])),
                                  True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2
        screen.blit(text4, textrect4)

        text4 = basicfont4.render("Press q to quit or c to continue", True, AQUA)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 + HEIGHT / 10
        screen.blit(text4, textrect4)

        basicfont5 = pygame.font.Font(words, 24)  # This code displays letters onto the screen
        text4 = basicfont5.render("Credits: ", True, RED)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2 - WIDTH / 4
        textrect4.centery = HEIGHT / 2 + HEIGHT / 4
        screen.blit(text4, textrect4)

        text4 = basicfont4.render("Game Developer -- Jason Melnik", True, RED)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 + HEIGHT / 3
        screen.blit(text4, textrect4)

        text4 = basicfont4.render("Graphics Design - Carrie-lynn LaFranchi", True, RED)
        textrect4 = text4.get_rect()
        textrect4.centerx = WIDTH / 2
        textrect4.centery = HEIGHT / 2 + HEIGHT / 2.5
        screen.blit(text4, textrect4)

        pygame.display.flip()
        pygame.display.update()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # If you click on the X on the screen it asks if you want to close the game
                gameExit = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:  # Quits the whole game
                    gameExit = True
                    game_over_2 = True
                    pygame.quit()
                    done = True
                    break
                if event.key == pygame.K_c:
                    game_over_2 = False
                    pygame.quit()
                    break